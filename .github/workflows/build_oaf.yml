name: Build OpenAppFilter for PVE

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      # 1. 拉取 OpenWrt 源码
      - name: Checkout OpenWrt source
        uses: actions/checkout@v4
        with:
          repository: immortalwrt/immortalwrt  # 替换为你的 ImmortalWrt 仓库
          submodules: recursive

      # 2. 下载 OpenAppFilter
      - name: Download OpenAppFilter
        run: |
          git clone https://github.com/destan19/OpenAppFilter.git package/OpenAppFilter

      - name: Install PVE kernel headers
        run: |
          # 1. 添加 Proxmox VE 官方仓库
          echo "deb http://download.proxmox.com/debian/pve bookworm pve-no-subscription" | sudo tee /etc/apt/sources.list.d/pve.list
          wget -q https://enterprise.proxmox.com/debian/proxmox-release-bookworm.gpg -O /etc/apt/trusted.gpg.d/proxmox-release-bookworm.gpg

          # 2. 更新并安装必要组件
          sudo apt update -y
          sudo apt install -y apt-transport-https ca-certificates

          # 3. 获取当前系统架构（amd64/i386）
          ARCH=$(dpkg --print-architecture)

          # 4. 安装匹配的内核头文件
          KERNEL_VERSION=$(uname -r)
          sudo apt install -y linux-headers-${KERNEL_VERSION}

          # 5. 验证安装
          ls /usr/src/linux-headers-${KERNEL_VERSION} || echo "Headers not found!"
      # 3. 动态获取 PVE 内核版本并下载头文件
      - name: Fetch PVE kernel headers
        run: |
          wget http://download.proxmox.com/debian/pve/dists/bookworm/pve-no-subscription/binary-amd64/proxmox-default-kernel_1.1.0_all.deb
          sudo apt install -y ./proxmox-default-kernel_1.1.0_all.deb
          wget http://download.proxmox.com/debian/pve/dists/bookworm/pve-no-subscription/binary-amd64/pve-headers_8.4.0_all.deb
          sudo apt install -y ./pve-headers_8.4.0_all.deb

      # 4. 配置编译环境（关键步骤）
      - name: Configure environment
        run: |
          # 使用 PVE 内核路径替换 OpenWrt 默认内核路径
          echo "CONFIG_EXTERNAL_KERNEL_TREE=/usr/src/linux-headers-$(uname -r)" >> .config
          echo "CONFIG_PACKAGE_luci-app-oaf=y" >> .config
          echo "CONFIG_PACKAGE_open-app-filter=y" >> .config
          echo "CONFIG_PACKAGE_oaf=y" >> .config
          make defconfig

      # 5. 安装编译依赖
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential libelf-dev libssl-dev flex bison

      # 6. 编译 OpenAppFilter（强制使用 PVE 内核）
      - name: Compile with PVE kernel
        run: |
          make package/OpenAppFilter/oaf/compile \
            KERNEL_DIR=/usr/src/linux-headers-$(uname -r) \
            ARCH=x86_64 \
            V=s

      # 7. 上传生成的模块和 IPK
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pve-openappfilter
          path: |
            bin/packages/**/oaf*.ipk
            package/OpenAppFilter/oaf/src/*.ko  # 内核模块
